(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{WkzS:function(e,a,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/getting-started",function(){return t("l4Da")}])},l4Da:function(e,a,t){"use strict";t.r(a);var n=t("q1tI"),l=t.n(n),c=t("NsgW"),r=t("0FA2"),p=t("kOwS"),o=t("qNsG"),s=t("7ljp"),i=(l.a.createElement,{}),b="wrapper";function m(e){var a=e.components,t=Object(o.a)(e,["components"]);return Object(s.b)(b,Object(p.a)({},i,t,{components:a,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"getting-started"},"Getting Started"),Object(s.b)("h2",{id:"table-of-contents"},"Table of Contents"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("a",Object(p.a)({parentName:"p"},{href:"#installation"}),"Installation"))),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("a",Object(p.a)({parentName:"p"},{href:"#usage"}),"Usage")),Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul"},Object(s.b)("a",Object(p.a)({parentName:"li"},{href:"#builder-and-parser"}),"Builder and Parser")))),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("a",Object(p.a)({parentName:"p"},{href:"#usage-with-an-rpl-file"}),"Usage with an ",Object(s.b)("inlineCode",{parentName:"a"},".rpl")," file")),Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul"},Object(s.b)("a",Object(p.a)({parentName:"li"},{href:"#external-schema-file"}),"External schema file")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("a",Object(p.a)({parentName:"li"},{href:"#async-schema"}),"Async schema"))))),Object(s.b)("h2",{id:"installation"},"Installation"),Object(s.b)("p",null,"Installing with ",Object(s.b)("inlineCode",{parentName:"p"},"npm")," or ",Object(s.b)("inlineCode",{parentName:"p"},"yarn")),Object(s.b)("pre",null,Object(s.b)("code",Object(p.a)({parentName:"pre"},{}),"npm install rockplate\nyarn add rockplate\n")),Object(s.b)("p",null,"Installing with ",Object(s.b)("inlineCode",{parentName:"p"},"<script>")," tag"),Object(s.b)("pre",null,Object(s.b)("code",Object(p.a)({parentName:"pre"},{className:"language-html"}),'<script src="https://cdn.jsdelivr.net/npm/rockplate@latest/dist/rockplate.min.js"><\/script>\n')),Object(s.b)("h2",{id:"usage"},"Usage"),Object(s.b)("p",null,"TypeScript/JavaScript"),Object(s.b)("pre",null,Object(s.b)("code",Object(p.a)({parentName:"pre"},{className:"language-javascript"}),"import { Rockplate } from 'rockplate';\n\nconst template = 'My name is [my name]';\nconst schema = {\n  my: {\n    name: 'My Name',\n  },\n};\nconst rpl = new Rockplate(template, schema);\nconst output = rpl.parse({\n  // you will get type hints\n  // for properties in schema as you type\n  my: {\n    name: 'Safraz Razik',\n  },\n});\nconsole.log(output); // My name is Safraz Razik\n")),Object(s.b)("p",null,"Usage with ",Object(s.b)("inlineCode",{parentName:"p"},"<script>")," tag:"),Object(s.b)("pre",null,Object(s.b)("code",Object(p.a)({parentName:"pre"},{className:"language-javascript"}),"var Rockplate = window.rockplate.Rockplate;\n\nvar rpl = new Rockplate(template, schema);\n\n// ...\n")),Object(s.b)("h3",{id:"builder-and-parser"},"Builder and Parser"),Object(s.b)("p",null,"See ",Object(s.b)("a",Object(p.a)({parentName:"p"},{href:"/advanced-usage#builder-and-parser"}),"Advanced Usage")," section to learn how to use the ",Object(s.b)("inlineCode",{parentName:"p"},"Builder")," and ",Object(s.b)("inlineCode",{parentName:"p"},"Parser")," classes instead of ",Object(s.b)("inlineCode",{parentName:"p"},"Rockplate")," class."),Object(s.b)("h2",{id:"usage-with-an-rpl-file"},"Usage with an ",Object(s.b)("inlineCode",{parentName:"h2"},".rpl")," file"),Object(s.b)("p",null,"NOTE: If you're using Visual Studio Code, install the ",Object(s.b)("a",Object(p.a)({parentName:"p"},{href:"https://marketplace.visualstudio.com/items?itemName=safrazik.rockplate-vscode"}),"Official Extension")," to get IntelliSense and Linting support for ",Object(s.b)("inlineCode",{parentName:"p"},".rpl")," files."),Object(s.b)("div",{style:{width:"100%",overflowX:"auto"}},Object(s.b)("p",null,Object(s.b)("img",Object(p.a)({parentName:"p"},{src:"https://raw.githubusercontent.com/rockplate/rockplate-vscode/master/images/rockplate-demo.gif",alt:"Rockplate VSCode"})))),Object(s.b)("p",null,"You can embed schema in an ",Object(s.b)("inlineCode",{parentName:"p"},".rpl")," file in json format on top of the file."),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"my-template.rpl")),Object(s.b)("pre",null,Object(s.b)("code",Object(p.a)({parentName:"pre"},{className:"language-rockplate"}),'{\n  "my": {\n    "name": "My Name"\n  }\n}\nMy name is [my name]\n')),Object(s.b)("pre",null,Object(s.b)("code",Object(p.a)({parentName:"pre"},{className:"language-javascript"}),"import { Rockplate } from 'rockplate';\nimport { readFileSync } from 'fs';\n\nconst template = readFileSync('/some/dir/my-template.rpl', 'utf8');\nconst rpl = new Rockplate(template);\nconst output = rpl.parse({\n  my: {\n    name: 'Safraz Razik',\n  },\n});\nconsole.log(output); // My name is Safraz Razik\n")),Object(s.b)("h3",{id:"external-schema-file"},"External schema file"),Object(s.b)("p",null,"If you choose to have your schema in an external json file, you should reference that json file from your rpl file by defining a json object on top of the file with only a key named ",Object(s.b)("inlineCode",{parentName:"p"},'"schema"')," with the json file path relative to the rpl file"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"my-schema.json")," file"),Object(s.b)("pre",null,Object(s.b)("code",Object(p.a)({parentName:"pre"},{className:"language-json"}),'{\n  "my": {\n    "name": "My Name"\n  }\n}\n')),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"my-template.rpl")," file"),Object(s.b)("pre",null,Object(s.b)("code",Object(p.a)({parentName:"pre"},{className:"language-rockplate"}),'{\n    "schema": "./my-schema.json"\n}\n\nMy name is [my name]\n')),Object(s.b)("pre",null,Object(s.b)("code",Object(p.a)({parentName:"pre"},{className:"language-javascript"}),"import { Rockplate } from 'rockplate';\nimport { readFileSync } from 'fs';\nimport { resolve, dirname } from 'path';\n\nconst getRpl = (templateFile) => {\n  const schemaResolver = (schemaUrl) => {\n    // The value of \"schema\" is passed into the schema resolver\n    // in this example, schemaUrl = \"./my-schema.json\"\n    const filePath = resolve(dirname(templateFile), schemaUrl);\n    const fileContent = readFileSync(filePath, 'utf8');\n    return JSON.parse(fileContent);\n  };\n\n  const template = readFileSync(templateFile, 'utf8');\n  // instead of passing a schema object, you should pass a schema resolver function\n  return new Rockplate(template, schemaResolver);\n};\n\nconst rpl = getRpl('/some/dir/my-template.rpl');\nconst output = rpl.parse({\n  my: {\n    name: 'Safraz Razik',\n  },\n});\nconsole.log(output); // My name is Safraz Razik\n")),Object(s.b)("h3",{id:"async-schema"},"Async schema"),Object(s.b)("p",null,"See ",Object(s.b)("a",Object(p.a)({parentName:"p"},{href:"/advanced-usage#async-schema"}),"Advanced Usage")," section to learn how to read files asynchronously instead of synchronously."))}m.isMDXComponent=!0,t.d(a,"default",(function(){return u}));var j=l.a.createElement;function u(){return j(c.a,null,j(m,null),j(r.a,{step:1,prev:{link:"/",label:"Home"},next:{link:"/data-structure",label:"Data Structure"}}))}}},[["WkzS",1,2,0,3,4,5]]]);