(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{"6ktY":function(e,t,a){"use strict";a.r(t);var n=a("q1tI"),r=a.n(n),i=a("NsgW"),b=a("0FA2"),l=a("FAb2"),c=a("kOwS"),o=a("qNsG"),p=a("7ljp"),d=(r.a.createElement,{}),s="wrapper";function u(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(p.b)(s,Object(c.a)({},d,a,{components:t,mdxType:"MDXLayout"}),Object(p.b)("h1",{id:"data-structure"},"Data Structure"),Object(p.b)("h2",{id:"table-of-contents"},"Table of Contents"),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",Object(c.a)({parentName:"p"},{href:"#primitives"}),"Primitives")),Object(p.b)("ul",{parentName:"li"},Object(p.b)("li",{parentName:"ul"},Object(p.b)("a",Object(c.a)({parentName:"li"},{href:"#booleans"}),"Booleans")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("a",Object(c.a)({parentName:"li"},{href:"#identifiers"}),"Identifiers")))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",Object(c.a)({parentName:"p"},{href:"#arrays"}),"Arrays")))),Object(p.b)("h2",{id:"primitives"},"Primitives"),Object(p.b)("p",null,"Primitives are identified with ",Object(p.b)("inlineCode",{parentName:"p"},"Object")," and ",Object(p.b)("inlineCode",{parentName:"p"},"Property")),Object(p.b)("p",null,"You should create an object identified by a string key"),Object(p.b)("p",null,"E.g: Order object identified by ",Object(p.b)("inlineCode",{parentName:"p"},'"order"')),Object(p.b)("pre",null,Object(p.b)("code",Object(c.a)({parentName:"pre"},{className:"language-json"}),'{\n  "order": {\n    "paid": true,\n    "total": "$450.00"\n  }\n}\n')),Object(p.b)("pre",null,Object(p.b)("code",Object(c.a)({parentName:"pre"},{className:"language-rockplate"}),"Total: [order total]\n\n[if order is paid]\n  Paid\n[end if]\n")),Object(p.b)("p",null,"Two types of primitive types are supported: ",Object(p.b)("inlineCode",{parentName:"p"},"Booleans")," and ",Object(p.b)("inlineCode",{parentName:"p"},"Identifiers")),Object(p.b)("h3",{id:"booleans"},"Booleans"),Object(p.b)("p",null,"Booleans are equivalant to JavaScript/JSON boolean values. Only accepted values are ",Object(p.b)("inlineCode",{parentName:"p"},"true")," and ",Object(p.b)("inlineCode",{parentName:"p"},"false")),Object(p.b)("p",null,"E.g: Order object with ",Object(p.b)("inlineCode",{parentName:"p"},'"paid"')," boolean property"),Object(p.b)("pre",null,Object(p.b)("code",Object(c.a)({parentName:"pre"},{className:"language-json"}),'{\n  "order": {\n    "paid": true\n  }\n}\n')),Object(p.b)("pre",null,Object(p.b)("code",Object(c.a)({parentName:"pre"},{className:"language-rockplate"}),"[if order is paid]\n  Paid\n[end if]\n")),Object(p.b)("h3",{id:"identifiers"},"Identifiers"),Object(p.b)("p",null,"Primitive variables other than booleans are called identifiers. Commonly these are strings, but can be any JavaScript/JSON primitive values including numbers."),Object(p.b)("p",null,"E.g: Order object with ",Object(p.b)("inlineCode",{parentName:"p"},'"total"')," identifier property"),Object(p.b)("pre",null,Object(p.b)("code",Object(c.a)({parentName:"pre"},{className:"language-json"}),'{\n  "order": {\n    "total": "$450.00"\n  }\n}\n')),Object(p.b)("pre",null,Object(p.b)("code",Object(c.a)({parentName:"pre"},{className:"language-rockplate"}),"Total: [order total]\n")),Object(p.b)("h2",{id:"arrays"},"Arrays"),Object(p.b)("p",null,"Arrays are collections of ",Object(p.b)("inlineCode",{parentName:"p"},"Identifiers")," or ",Object(p.b)("inlineCode",{parentName:"p"},"Booleans")),Object(p.b)("p",null,"You should create an array identified by a string key"),Object(p.b)("p",null,"E.g: Orders array identified by ",Object(p.b)("inlineCode",{parentName:"p"},'"orders"')),Object(p.b)("pre",null,Object(p.b)("code",Object(c.a)({parentName:"pre"},{className:"language-json"}),'{\n  "orders": [\n    {\n      "order": {\n        "paid": true,\n        "total": "$450.00"\n      }\n    },\n    {\n      "order": {\n        "paid": false,\n        "total": "$280.00"\n      }\n    }\n  ]\n}\n')),Object(p.b)("pre",null,Object(p.b)("code",Object(c.a)({parentName:"pre"},{className:"language-rockplate"}),"[repeat orders]\n  Total: [order total]\n\n  [if order is paid]\n    Paid\n  [end if]\n[end repeat]\n")))}u.isMDXComponent=!0,a.d(t,"default",(function(){return O}));var j=r.a.createElement;function O(){return j(i.a,null,j(u,null),j(l.a,{path:"docs/data-structure.mdx"}),j(b.a,{step:2,prev:{link:"/getting-started",label:"Getting Started"},next:{link:"/syntax",label:"Syntax"}}))}},FAb2:function(e,t,a){"use strict";a.d(t,"a",(function(){return o}));var n=a("q1tI"),r=a.n(n),i=a("R/WZ"),b=a("hlie"),l=r.a.createElement,c=Object(i.a)((function(e){return{root:{marginTop:"30px",textAlign:"right"}}}));function o(e){var t=c(),a="https://github.com/rockplate/rockplate-docs/edit/master/"+e.path;return l("div",{className:t.root},l(b.a,{href:a,target:"_blank",color:"secondary"},"Edit this page"))}},YDpl:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/data-structure",function(){return a("6ktY")}])}},[["YDpl",1,2,0,3,4,5]]]);