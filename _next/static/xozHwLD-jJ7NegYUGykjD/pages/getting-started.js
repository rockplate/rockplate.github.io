(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{FAb2:function(e,t,a){"use strict";a.d(t,"a",(function(){return o}));var n=a("q1tI"),l=a.n(n),r=a("R/WZ"),c=a("hlie"),p=l.a.createElement,i=Object(r.a)((function(e){return{root:{marginTop:"30px",textAlign:"right"}}}));function o(e){var t=i(),a="https://github.com/rockplate/rockplate-docs/edit/master/"+e.path;return p("div",{className:t.root},p(c.a,{href:a,target:"_blank",color:"secondary"},"Edit this page"))}},WkzS:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/getting-started",function(){return a("l4Da")}])},l4Da:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return d}));var n=a("q1tI"),l=a.n(n),r=a("NsgW"),c=a("0FA2"),p=a("FAb2"),i=a("wx14"),o=a("Ff2n"),b=a("7ljp"),s=(l.a.createElement,{}),m="wrapper";function u(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(b.b)(m,Object(i.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h1",{id:"getting-started"},"Getting Started"),Object(b.b)("h2",{id:"table-of-contents"},"Table of Contents"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("a",Object(i.a)({parentName:"p"},{href:"#implementations"}),"Implementations"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("a",Object(i.a)({parentName:"p"},{href:"#installation"}),"Installation"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("a",Object(i.a)({parentName:"p"},{href:"#usage"}),"Usage")),Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(i.a)({parentName:"li"},{href:"#builder-and-parser"}),"Builder and Parser")))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("a",Object(i.a)({parentName:"p"},{href:"#usage-with-an-rpl-and-rphtml-file"}),"Usage with an ",Object(b.b)("inlineCode",{parentName:"a"},".rpl")," and ",Object(b.b)("inlineCode",{parentName:"a"},".rphtml")," file")),Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(i.a)({parentName:"li"},{href:"#external-schema-file"}),"External schema file")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(i.a)({parentName:"li"},{href:"#async-schema"}),"Async schema"))))),Object(b.b)("h2",{id:"implementations"},"Implementations"),Object(b.b)("p",null,"Currently Rockplate has the default official implementation in TypeScript (JavaScript) for browser and Node Js which is production ready. We have plans to implement and support more languages in the future. When other language implementations are available, the documentation will include them too."),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"Written in TypeScript"),Object(b.b)("li",{parentName:"ul"},"No dependencies, ",Object(b.b)("inlineCode",{parentName:"li"},"5kb")," minified, gzipped"),Object(b.b)("li",{parentName:"ul"},"Zero RegEx lexer/AST builder (High performance and high security)"),Object(b.b)("li",{parentName:"ul"},"Battle-tested with \ud83d\udd25 ",Object(b.b)("strong",{parentName:"li"},"100%")," code coverage")),Object(b.b)("p",null,"Watch out the ",Object(b.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/rockplate"}),"rockplate organization")," for any ongoing work. We welcome your contributions. Please name your implementation ",Object(b.b)("inlineCode",{parentName:"p"},"rockplate-<langname>"),". E.g: ",Object(b.b)("inlineCode",{parentName:"p"},"rockplate-python"),", ",Object(b.b)("inlineCode",{parentName:"p"},"rockplate-csharp"),", etc."),Object(b.b)("h2",{id:"installation"},"Installation"),Object(b.b)("p",null,"Installing with ",Object(b.b)("inlineCode",{parentName:"p"},"npm")," or ",Object(b.b)("inlineCode",{parentName:"p"},"yarn")),Object(b.b)("pre",null,Object(b.b)("code",Object(i.a)({parentName:"pre"},{}),"npm install rockplate\nyarn add rockplate\n")),Object(b.b)("p",null,"Installing with ",Object(b.b)("inlineCode",{parentName:"p"},"<script>")," tag"),Object(b.b)("pre",null,Object(b.b)("code",Object(i.a)({parentName:"pre"},{className:"language-html"}),'<script src="https://cdn.jsdelivr.net/npm/rockplate@latest/dist/umd/rockplate.min.js"><\/script>\n')),Object(b.b)("h2",{id:"usage"},"Usage"),Object(b.b)("p",null,"TypeScript/JavaScript"),Object(b.b)("pre",null,Object(b.b)("code",Object(i.a)({parentName:"pre"},{className:"language-javascript"}),"import { Rockplate } from 'rockplate';\n\nconst template = 'My name is [my name]';\nconst schema = {\n  my: {\n    name: 'My Name',\n  },\n};\nconst rpl = new Rockplate(template, schema);\nconst output = rpl.parse({\n  // you will get type hints\n  // for properties in schema as you type\n  my: {\n    name: 'Safraz Razik',\n  },\n});\nconsole.log(output); // My name is Safraz Razik\n")),Object(b.b)("p",null,"Usage with ",Object(b.b)("inlineCode",{parentName:"p"},"<script>")," tag:"),Object(b.b)("pre",null,Object(b.b)("code",Object(i.a)({parentName:"pre"},{className:"language-javascript"}),"var Rockplate = window.rockplate.Rockplate;\n\nvar rpl = new Rockplate(template, schema);\n\n// ...\n")),Object(b.b)("h3",{id:"builder-and-parser"},"Builder and Parser"),Object(b.b)("p",null,"See ",Object(b.b)("a",Object(i.a)({parentName:"p"},{href:"/advanced-usage#builder-and-parser"}),"Advanced Usage")," section to learn how to use the ",Object(b.b)("inlineCode",{parentName:"p"},"Builder")," and ",Object(b.b)("inlineCode",{parentName:"p"},"Parser")," classes directly instead of ",Object(b.b)("inlineCode",{parentName:"p"},"Rockplate")," class."),Object(b.b)("h2",{id:"usage-with-an-rpl-and-rphtml-file"},"Usage with an ",Object(b.b)("inlineCode",{parentName:"h2"},".rpl")," and ",Object(b.b)("inlineCode",{parentName:"h2"},".rphtml")," file"),Object(b.b)("p",null,"NOTE: If you're using Visual Studio Code, install the ",Object(b.b)("a",Object(i.a)({parentName:"p"},{href:"https://marketplace.visualstudio.com/items?itemName=safrazik.rockplate-vscode"}),"Official Extension")," to get IntelliSense and Linting support for ",Object(b.b)("inlineCode",{parentName:"p"},".rpl")," and ",Object(b.b)("inlineCode",{parentName:"p"},".rphtml")," files."),Object(b.b)("div",{style:{width:"100%",overflowX:"auto"}},Object(b.b)("p",null,Object(b.b)("img",Object(i.a)({parentName:"p"},{src:"https://raw.githubusercontent.com/rockplate/rockplate-vscode/master/images/rockplate-demo.gif",alt:"Rockplate VSCode"})))),Object(b.b)("p",null,"You can embed schema in an ",Object(b.b)("inlineCode",{parentName:"p"},".rpl")," or ",Object(b.b)("inlineCode",{parentName:"p"},".rphtml")," file in json format on top of the file."),Object(b.b)("p",null,Object(b.b)("inlineCode",{parentName:"p"},"my-template.rpl")),Object(b.b)("pre",null,Object(b.b)("code",Object(i.a)({parentName:"pre"},{className:"language-rockplate"}),'{\n  "my": {\n    "name": "My Name"\n  }\n}\nMy name is [my name]\n')),Object(b.b)("pre",null,Object(b.b)("code",Object(i.a)({parentName:"pre"},{className:"language-javascript"}),"import { Rockplate } from 'rockplate';\nimport { readFileSync } from 'fs';\n\nconst template = readFileSync('/some/dir/my-template.rpl', 'utf8');\nconst rpl = new Rockplate(template);\nconst output = rpl.parse({\n  my: {\n    name: 'Safraz Razik',\n  },\n});\nconsole.log(output); // My name is Safraz Razik\n")),Object(b.b)("h3",{id:"external-schema-file"},"External schema file"),Object(b.b)("p",null,"If you choose to have your schema in an external json file, you should reference that json file from your rpl file by defining a json object on top of the file with only a key named ",Object(b.b)("inlineCode",{parentName:"p"},'"schema"')," with the json file path relative to the rpl file"),Object(b.b)("p",null,Object(b.b)("inlineCode",{parentName:"p"},"my-schema.json")," file"),Object(b.b)("pre",null,Object(b.b)("code",Object(i.a)({parentName:"pre"},{className:"language-json"}),'{\n  "my": {\n    "name": "My Name"\n  }\n}\n')),Object(b.b)("p",null,Object(b.b)("inlineCode",{parentName:"p"},"my-template.rpl")," file"),Object(b.b)("pre",null,Object(b.b)("code",Object(i.a)({parentName:"pre"},{className:"language-rockplate"}),'{\n    "schema": "./my-schema.json"\n}\n\nMy name is [my name]\n')),Object(b.b)("pre",null,Object(b.b)("code",Object(i.a)({parentName:"pre"},{className:"language-javascript"}),"import { Rockplate } from 'rockplate';\nimport { readFileSync } from 'fs';\nimport { resolve, dirname } from 'path';\n\nconst getRpl = (templateFile) => {\n  const schemaResolver = (schemaUrl) => {\n    // The value of \"schema\" is passed into the schema resolver\n    // in this example, schemaUrl = \"./my-schema.json\"\n    const filePath = resolve(dirname(templateFile), schemaUrl);\n    const fileContent = readFileSync(filePath, 'utf8');\n    return JSON.parse(fileContent);\n  };\n\n  const template = readFileSync(templateFile, 'utf8');\n  // instead of passing a schema object, you should pass a schema resolver function\n  return new Rockplate(template, schemaResolver);\n};\n\nconst rpl = getRpl('/some/dir/my-template.rpl');\nconst output = rpl.parse({\n  my: {\n    name: 'Safraz Razik',\n  },\n});\nconsole.log(output); // My name is Safraz Razik\n")),Object(b.b)("h3",{id:"async-schema"},"Async schema"),Object(b.b)("p",null,"See ",Object(b.b)("a",Object(i.a)({parentName:"p"},{href:"/advanced-usage#async-schema"}),"Advanced Usage")," section to learn how to read files asynchronously instead of synchronously."))}u.isMDXComponent=!0;var j=l.a.createElement;function d(){return j(r.a,null,j(u,null),j(p.a,{path:"docs/getting-started.mdx"}),j(c.a,{step:1,prev:{link:"/",label:"Home"},next:{link:"/data-structure",label:"Data Structure"}}))}}},[["WkzS",1,2,0,3,4,5]]]);